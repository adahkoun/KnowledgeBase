Apache Web Server :
    Basic setup commands :
        yum install httpd                             : install apache web server on redhat based distros
        service httpd start                           : start the httpd service
        service httpd status                          : verify httpd status
        service httpd restart                         : restart the httpd service
        firewall-cmd --permanent --add-service=http   : if a firewall is installed this command allows http trafic
        cat /var/log/httpd/access.log                 : show httpd logs
        cat /var/log/httpd/error.log                  : show httpd error logs
        cat /etc/httpd/conf/httpd.conf                : shows the config file
                                                        Some params to edit :
                                                          Listen, DocumentRoot, ServerName
                                                        We can also add multiple websites using VirtualHosts :
                                                          <VirtualHost *:80>
                                                            ServerName www.home.com
                                                            DocumentRoot /var/www/houses
                                                          </VirtualHost>
                                                        We neet to configure the name resolution to access with a servername either by the hosts file or dns config.
                                                        We can also put specific configs for VirtualHosts in separate files and importing them in the main conf file :
                                                           Include conf/home.conf : add this line to httpd.conf to include this conf
                                                        After making any updates to the conf file we need to restart the httpd service
                                                        
Apache tomcat :
    Basic setup commands :
        yum install <java_package>                   : install the java version you want
        wget <link_of_tomcat_package_from_website>   : download the tomcat package from the official website that is compatible with your java version
        ./<tomcat_dir>/bin/startup.sh                : start tomcat server
        cat /<tomcat_dir>/conf/server.xml            : inspect tomcat config (for example changing port by updating <Connector port="8080")
        /<tomcat_dir>/logs                           : the directory of logs
                                                       /<tomcat_dir>/logs/catalina.out :  is the log file for tomcat startup
        /<tomcat_dir>/webapps                        : the directory where to put our apps in war format
                                                       We can generate the war by the jar command in the app dir : jar -cvf app.war *
                                                       We can also use build tools such as maven or gradle : mvn package / gradle build


Python WSGI (Web Server Gateway Interface) :
    Some concepts and commands :
    Python WSGI are tools that ensure communication between webservers and python applications
    Some WSGI :
        Gunicorn
        uWSGI
        Gevent
        Twisted Web
    Example of Flask app :
        This is the struture of a simple project :
            |--- my_app
            |----- requirements.txt
            |----- main.py
            |----- utils
            |----- tests
            |----- config
            |----- routes
            |----- services
            |----- db
            |----- core
        This is a basic flask app :
            from flask import Flask
            app = Flask(__name__)
            @app.route('/')
            def hello():
                return 'Hello World'
            if __name__ == '__main__':
                app.run()
        To setup and run a flask (Web frameworks) application we can run these commands :
            pip install -r requirements.txt
            python main.py
            
        In production environments it is better to use a WSGI such as Gunicorn :
            A basic usage : gunicorn main:app -w2
                            main : is the file name without .py
                            app  : is the variable of Flask as shown in the source code of the example
                            -w2  : is the number of worker to launch here we launched 2 workers
                                    
        
NodeJS Web Framework (we will use expressJS as an example) :
    Some basic concepts and commands :
        This is the struture of a simple project :
            |--- my_app
            |----- package.json
            |----- app.js
            |----- public
            |----- tests
            |----- config
            |----- routes
            |----- services
            |----- db
            |----- core
        This is a basic expressJS app :
             const express = require('express')
             const app = express()
             const port = 3000
             
             app.get('/', (req, res) => {
               res.send('Hello World!')
             })
             
             app.listen(port, () => {
               console.log(`Example app listening on port ${port}`)
             })
        To setup and run an expressJS application we can run these commands :
            npm install     : to install packages defined in package.json on the "dependencies"{} tag
            node app.js     : to launch the application
            npm run start   : we use this command to trigger a specific script defined in package.json "scripts"{} tag
                              Example of "scripts"{} tag :
                                "scripts"{
                                    "start": "NODE_ENV=prod node app.js"
                                }
                              In our case we executed start script (we can name the scripts whatever we want)
        
        In production environments it is not advised to execute node command by itself to launch the application,
        We need to use node process managers such as : 
            supervisord 
            forever 
            pm2
        These tools ensures that our node app stays alive forever, they also add a load-balancer and multiple workers to our application.
        Launching node app with pm2 :
            pm2 start app.js        : starts the app with pm2
            pm2 start app.js -i 4   : starts the app and adds 4 workers
             
Extra Infos :
    - Each ip address can have up to 65,535 ports (2^16)
    - In a web application such as expressjs or flask, if the ip address of the host is not specified, 
      the application can only be accessed via localhost address.
    - We need to set the ip address of an interface in our appli to make the appli accessible via an interface
      Example for flask : 
        app.run(port=8080, host='192.168.1.15')
    - If we want to make our appli accessible via all interfaces we need to set host='0.0.0.0' in out appli


SSL and TLS Basics :
    - A certificate is a way to garantee trust between a sender and receiver.
    - Symmetric encryption uses one key to crypt and decrypt data
    - Asymmetric encryption uses a pair of key (private key and public key or lock) the key is yours and the lock is shared with others
    - openssl genrsa -out mykey.key 1024 : generate a private key with openssl
      openssl rsa -in mykey.key -pubout > mykey.pem : generate a public key based on the private key generated
      We use openssl in the node where our webserver is hosted to provide the keys to it.
    - We can combine symmetric and asymmetric encyption by using public key to encrypt the symmetric key and the server will decrypt it using his private key
    - Certificates contain informations about the server and the public key of it.
    - We can generate a self signed certificate but it will cause be detected in the browser as insecure.
    - We can generate a certificate signing request and send it to a Certificate Authority (CA) so they can verify our request and validate it for us
      so we can protect users from being scammed.
    - openssl req -new -key mykey.key -out mykey.csr : generate a certificate signing request.
      openssl x509 -req -sha256 -days 365 -in mykey.csr -signkey mykey.key -out mykey.crt : signing the certificate locally in the server.
      openssl req -new -key mykey.key -out mykey.csr -subj "/C=US/ST=CA/O=myorg, Inc./CN=mydomain.com" : generate a certificate that we can send to a CA for signing
        
